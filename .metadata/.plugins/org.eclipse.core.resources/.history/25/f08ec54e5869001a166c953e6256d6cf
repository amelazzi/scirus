	package entities.diagram.navigator;

/**
 * @generated
 */
public class DefaultNavigatorLabelProvider extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.ui.navigator.ICommonLabelProvider, org.eclipse.jface.viewers.ITreePathLabelProvider {

		/**
 * @generated
 */
static {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor());  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
public void updateLabel(org.eclipse.jface.viewers.ViewerLabel label, org.eclipse.jface.viewers.TreePath elementPath) {
	Object element = elementPath.getLastSegment();
	if (element instanceof entities.diagram.navigator.DefaultNavigatorItem && !isOwnView(((entities.diagram.navigator.DefaultNavigatorItem) element).getView())) {
		return;
	}
	label.setText(getText(element));
	label.setImage(getImage(element));
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(Object element) {
	if (element instanceof entities.diagram.navigator.DefaultNavigatorGroup) {
	entities.diagram.navigator.DefaultNavigatorGroup group = (entities.diagram.navigator.DefaultNavigatorGroup) element;
	return entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
}

	if (element instanceof entities.diagram.navigator.DefaultNavigatorItem) {
	entities.diagram.navigator.DefaultNavigatorItem navigatorItem = (entities.diagram.navigator.DefaultNavigatorItem) element;
	if (!isOwnView(navigatorItem.getView())) {
		return super.getImage(element);
	}
	return getImage(navigatorItem.getView());
}

	
		return super.getImage(element);
}
	
		/**
 * @generated
 */
public org.eclipse.swt.graphics.Image getImage(org.eclipse.gmf.runtime.notation.View view) {
		switch (entities.diagram.part.DefaultVisualIDRegistry.getVisualID(view)) {
		case entities.diagram.edit.parts.NetworkEditPart.VISUAL_ID:
	return getImage("Navigator?Diagram?torpics?Network", entities.diagram.providers.DefaultElementTypes.Network_1000); //$NON-NLS-1$
case entities.diagram.edit.parts.EntryFunctionEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?torpics?EntryFunction", entities.diagram.providers.DefaultElementTypes.EntryFunction_2001); //$NON-NLS-1$
case entities.diagram.edit.parts.CapteurEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?torpics?Capteur", entities.diagram.providers.DefaultElementTypes.Capteur_2002); //$NON-NLS-1$
case entities.diagram.edit.parts.DataBaseEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?torpics?DataBase", entities.diagram.providers.DefaultElementTypes.DataBase_2003); //$NON-NLS-1$
case entities.diagram.edit.parts.CloudEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?torpics?Cloud", entities.diagram.providers.DefaultElementTypes.Cloud_2004); //$NON-NLS-1$
case entities.diagram.edit.parts.GateWayEditPart.VISUAL_ID:
	return getImage("Navigator?TopLevelNode?torpics?GateWay", entities.diagram.providers.DefaultElementTypes.GateWay_2005); //$NON-NLS-1$
case entities.diagram.edit.parts.LinkEditPart.VISUAL_ID:
	return getImage("Navigator?Link?torpics?Link", entities.diagram.providers.DefaultElementTypes.Link_4001); //$NON-NLS-1$
	}
		return getImage("Navigator?UnknownElement", null);  //$NON-NLS-1$
}
	
		/**
 * @generated
 */
private org.eclipse.swt.graphics.Image getImage(String key, org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	org.eclipse.jface.resource.ImageRegistry imageRegistry = entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().getImageRegistry();
	org.eclipse.swt.graphics.Image image = imageRegistry.get(key);
	if (image == null && elementType != null && entities.diagram.providers.DefaultElementTypes.isKnownElementType(elementType)) {
		image = entities.diagram.providers.DefaultElementTypes.getImage(elementType);
		imageRegistry.put(key, image);
	}
			
	if (image == null) {
		image = imageRegistry.get("Navigator?ImageNotFound");  //$NON-NLS-1$
		imageRegistry.put(key, image);
	}
	return image;
}
	
		/**
 * @generated
 */
public String getText(Object element) {
	if (element instanceof entities.diagram.navigator.DefaultNavigatorGroup) {
	entities.diagram.navigator.DefaultNavigatorGroup group = (entities.diagram.navigator.DefaultNavigatorGroup) element;
	return group.getGroupName();
}

	if (element instanceof entities.diagram.navigator.DefaultNavigatorItem) {
	entities.diagram.navigator.DefaultNavigatorItem navigatorItem = (entities.diagram.navigator.DefaultNavigatorItem) element;
   		if (!isOwnView(navigatorItem.getView())) {
   			return null;
   		}
   		return getText(navigatorItem.getView());
	}

	
		return super.getText(element);
}
	
		/**
 * @generated
 */
public String getText(org.eclipse.gmf.runtime.notation.View view) {
	if (view.getElement() != null && view.getElement().eIsProxy()) {
		return getUnresolvedDomainElementProxyText(view);
	}
		switch (entities.diagram.part.DefaultVisualIDRegistry.getVisualID(view)) {
		case entities.diagram.edit.parts.NetworkEditPart.VISUAL_ID:
	return getNetwork_1000Text(view);
case entities.diagram.edit.parts.EntryFunctionEditPart.VISUAL_ID:
	return getEntryFunction_2001Text(view);
case entities.diagram.edit.parts.CapteurEditPart.VISUAL_ID:
	return getCapteur_2002Text(view);
case entities.diagram.edit.parts.DataBaseEditPart.VISUAL_ID:
	return getDataBase_2003Text(view);
case entities.diagram.edit.parts.CloudEditPart.VISUAL_ID:
	return getCloud_2004Text(view);
case entities.diagram.edit.parts.GateWayEditPart.VISUAL_ID:
	return getGateWay_2005Text(view);
case entities.diagram.edit.parts.LinkEditPart.VISUAL_ID:
	return getLink_4001Text(view);
	}
		return getUnknownElementText(view);
}
	
		/**
 * @generated
 */
private String getNetwork_1000Text(org.eclipse.gmf.runtime.notation.View view) {
					return "";  //$NON-NLS-1$
	}
	/**
 * @generated
 */
private String getEntryFunction_2001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.EntryFunction_2001, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.EntryFunctionTypeEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCapteur_2002Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.Capteur_2002, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.CapteurNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getDataBase_2003Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.DataBase_2003, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.DataBaseNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getCloud_2004Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.Cloud_2004, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.CloudNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getGateWay_2005Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.GateWay_2005, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.GateWayNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	/**
 * @generated
 */
private String getLink_4001Text(org.eclipse.gmf.runtime.notation.View view) {
					org.eclipse.gmf.runtime.common.ui.services.parser.IParser parser = entities.diagram.providers.DefaultParserProvider.getParser(entities.diagram.providers.DefaultElementTypes.Link_4001, view.getElement() != null ? view.getElement() : view, entities.diagram.part.DefaultVisualIDRegistry.getType(entities.diagram.edit.parts.LinkNameEditPart.VISUAL_ID));
if (parser != null) {
	return parser.getPrintString(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(view.getElement() != null ? view.getElement() : view), org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions.NONE.intValue());
} else {
	entities.diagram.part.DefaultDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 6001); //$NON-NLS-1$
	return "";  //$NON-NLS-1$
}
	}
	
		/**
 * @generated
 */
private String getUnknownElementText(org.eclipse.gmf.runtime.notation.View view) {
	return "<UnknownElement Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
private String getUnresolvedDomainElementProxyText(org.eclipse.gmf.runtime.notation.View view) {
	return "<Unresolved domain element Visual_ID = " + view.getType() + ">";  //$NON-NLS-1$  //$NON-NLS-2$
}
	
		/**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}

		/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

		/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
	
		/**
 * @generated
 */
public String getDescription(Object anElement) {
	return null;
}
	
		/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return entities.diagram.edit.parts.NetworkEditPart.MODEL_ID.equals(entities.diagram.part.DefaultVisualIDRegistry.getModelID(view));
}

	}
